{"version":3,"sources":["Logic/Format.js","Components/DisplayLink.js","Components/Email.js","Logic/Shorten.js","App.js","serviceWorker.js","index.js"],"names":["regex","encoding","FormatEmails","str","replace","split","join","DisplayLink","label","url","copy","Form","Group","as","Row","controlId","Label","column","sm","Col","InputGroup","Control","readOnly","value","Append","Button","variant","type","onClick","e","Copy","copyToClipboard","Email","xs","lg","EmailForm","useForm","handleSubmit","register","errors","useState","setLinkLoading","link","setLink","setUrl","emailListRegex","emailPlaceholder","Container","onSubmit","values","temp","recipients","cc","bcc","subject","body","err","emailRecipients","rest","emailCc","push","emailBcc","emailSubject","emailBody","length","Format","TinyURL","shorten","Shorten","then","res","name","placeholder","ref","required","pattern","message","Text","muted","rows","span","offset","App","style","marginBottom","marginTop","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.20806f93.chunk.js","sourcesContent":["const regex = {\n    newLine:  /[\\n\\r]/g,\n    tab: /\\t/g,\n    space: /\\s/g,\n}\n\nconst encoding = {\n    newLine: '%0A%0D',\n    tab: '%09',\n    space: '%20',\n}\n\nconst FormatEmails = (str) => {\n    let strArray = str.replace(regex.space,'').split(';');\n    return strArray.join();\n}\n\nexport default function FormatMailTo({recipients, cc, bcc, subject, body}) {\n    const initial = \"mailto:\";\n    if (!recipients) {\n        return { \n            err: 'Missing Data',\n        };\n    }\n    const emailRecipients = FormatEmails(recipients);\n    let rest = [];\n    if (cc) {\n        let emailCc = \"cc=\"+FormatEmails(cc);\n        rest.push(emailCc);\n    }\n\n    if (bcc) {\n        let emailBcc = \"bcc=\"+FormatEmails(bcc);\n        rest.push(emailBcc);\n    }\n    \n    if (subject) {\n        let emailSubject = \"subject=\"+subject.replace(regex.space, encoding.space);\n        rest.push(emailSubject);\n    }\n\n    if (body) {\n        let emailBody = \"body=\"+body.replace(regex.newLine, encoding.newLine).replace(regex.tab, encoding.tab).replace(regex.space, encoding.space);\n        rest.push(emailBody);\n    }\n\n    const emailRest = (rest.length > 0) ? rest.join('&') : '';\n    const mailTo = initial + emailRecipients + '?' + emailRest;\n    \n    return { \n        url: mailTo,\n    };\n}","import React, { useRef } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Copy from 'copy-to-clipboard';\n\nexport default function DisplayLink({label, url, copy}) {\n\n    const copyToClipboard = (url,e) => {\n        Copy(url);\n    }\n\n    return (\n        <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n            <Form.Label column sm={2}>\n            {label}\n            </Form.Label>\n            <Col sm={10}>\n                <InputGroup>\n                    <Form.Control readOnly={true} value={url}/>\n                    <InputGroup.Append>\n                        <Button variant=\"outline-dark\" type=\"submit\" onClick={(e) => {copyToClipboard(url, e)}}>ðŸ“‹</Button>\n                    </InputGroup.Append>\n                </InputGroup>\n            </Col>\n        </Form.Group>\n    )\n}","import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport Form from 'react-bootstrap/Form';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\nimport { Format, Shorten } from '../Logic';\nimport DisplayLink from './DisplayLink';\n\n\nexport default function Email() {\n    return (\n        <Row>\n            <Col xs={0} lg={2}/>\n            <Col>\n                <EmailForm/>\n            </Col>\n            <Col xs={0} lg={2}/>\n        </Row>\n    )\n}\n\nconst EmailForm = () => {\n    const { handleSubmit, register, errors } = useForm();\n    const [linkLoading, setLinkLoading] = useState(true);\n    const [link, setLink] = useState(\"\");\n    const [url, setUrl] = useState(\"\");\n    const onSubmit = (values) => {\n        let temp = Format(values).url;\n        setLinkLoading(true);\n        Shorten(temp).then((res, err) => {\n            setLinkLoading(false);\n            if (err) {\n                setLink(err);\n            } else {\n                setLink(res);\n                setUrl(temp);\n            }\n        })\n    }\n    const emailListRegex = /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5}){1,25}(;[ ]*([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5}){1,25})*$/i;\n    const emailPlaceholder = \"Use semicolons to separate emails.\"\n\n    return (\n        <Container>\n        <Form onSubmit={handleSubmit(onSubmit)}>\n            <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n                <Form.Label column sm={2}>\n                *To:\n                </Form.Label>\n                <Col sm={7}>\n                <Form.Control \n                name=\"recipients\"\n                placeholder={emailPlaceholder}\n                ref={register({\n                required: \"A Recipient is required\",\n                pattern: {\n                    value: emailListRegex,\n                    message: 'Please enter valid email(s)'\n                }\n                })}/>\n                </Col>\n                <Form.Text muted>\n                    {errors.recipients && errors.recipients.message}\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n                <Form.Label column sm={2}>\n                Cc:\n                </Form.Label>\n                <Col sm={7}>\n                <Form.Control \n                name=\"cc\"\n                placeholder={emailPlaceholder}\n                ref={register({\n                pattern: {\n                    value: emailListRegex,\n                    message: 'Please enter valid email(s)'\n                }\n                })}/>\n                </Col>\n                <Form.Text muted>\n                    {errors.cc && errors.cc.message}\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n                <Form.Label column sm={2}>\n                Bcc:\n                </Form.Label>\n                <Col sm={7}>\n                <Form.Control \n                name=\"bcc\"\n                placeholder={emailPlaceholder}\n                ref={register({\n                pattern: {\n                    value: emailListRegex,\n                    message: 'Please enter valid email(s)'\n                }\n                })}/>\n                </Col>\n                <Form.Text muted>\n                    {errors.bcc && errors.bcc.message}\n                </Form.Text>\n            </Form.Group>\n\n            <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n                <Form.Label column sm={2}>\n                Subject:\n                </Form.Label>\n                <Col sm={10}>\n                <Form.Control \n                name=\"subject\"\n                ref={register()}/>\n                </Col>\n            </Form.Group>\n\n            <Form.Group as={Row} controlId=\"formHorizontalEmail\">\n                <Form.Label column sm={2}>\n                Body:\n                </Form.Label>\n                <Col sm={10}>\n                <Form.Control \n                name=\"body\"\n                ref={register()}\n                as=\"textarea\"\n                rows=\"10\"/>\n                </Col>\n            </Form.Group>\n\n            <Form.Group as={Row}>\n                <Col sm={{ span: 10, offset: 2 }}>\n                <Button variant=\"dark\" type=\"submit\">Create Link</Button>\n                </Col>\n            </Form.Group>\n            <DisplayLink label='Link:' url={link}/>\n            <DisplayLink label='Full Link:' url={url}/>        \n        </Form>\n        </Container>\n    )\n}\n\n","import TinyURL from 'tinyurl';\n\nexport default function Shorten(url){\n    return TinyURL.shorten(url);\n}\n\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Email from './Components/Email';\nimport Container from 'react-bootstrap/Container';\n\n\nfunction App() {\n  return (\n    <Container>\n      <Container style={{marginBottom: 34, marginTop: 24}}><h1 className=\"banner\">prefilled email maker.</h1></Container>\n      <Email/>\n      <Container style={{marginBottom: 24}}><h6 className=\"banner\">made with ðŸ–¤</h6></Container>\n    </Container>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}